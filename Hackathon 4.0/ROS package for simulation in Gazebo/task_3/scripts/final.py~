#!/usr/bin/env python
from plutodrone.srv import *
from plutodrone.msg import *
from std_msgs.msg import Int16
from geometry_msgs.msg import PoseArray, Pose
import rospy
from datetime import datetime

#/*working variables*/
hower_point=(1, 2, 21)

class send_data():
	"""docstring for request_data"""
	def __init__(self):
		rospy.init_node('drone_stay')
		self.command_pub = rospy.Publisher('/drone_command', PlutoMsg, queue_size=1)
		rospy.Subscriber('whycon/poses', PoseArray, self.indentify_key )
		self.key_value=0
		self.cmd = PlutoMsg()
		self.cmd.rcRoll =1500
		self.cmd.rcPitch =1500
		self.cmd.rcYaw =1500
		self.cmd.rcThrottle =1500
		self.cmd.rcAUX1 =1500
		self.cmd.rcAUX2 =1500
		self.cmd.rcAUX3 =1500
		self.cmd.rcAUX4 =1000
		self.output = Pose()
		self.set_p = hower_point
		
	def arm(self):
		self.cmd.rcRoll=1500
		self.cmd.rcYaw=1500
		self.cmd.rcPitch =1500
		self.cmd.rcThrottle =1000
		self.cmd.rcAUX4 =1500
		print("arm")
		self.command_pub.publish(self.cmd)
		rospy.sleep(.1)

	def disarm(self):
		self.cmd.rcThrottle =1300
		self.cmd.rcAUX4 = 1200
		self.command_pub.publish(self.cmd)
		print("disarm")
		rospy.sleep(1)
	
	def indentify_key(self, msg):
		drone_p = msg.poses[0].position
		self.output.position.y = self.set_p[0] - drone_p.x
		self.output.position.x = self.set_p[1] - drone_p.y
		self.output.position.z = self.set_p[2] - drone_p.z
		self.out = self.output.position
		"""arming"""
		if(self.key_value==0):
			self.key_value = 1		
			rospy.sleep(2)
			self.key_value = 2
		if(self.key_value==2):
			self.stable()
			if (self.out.z >= (1)): self.cmd.rcThrottle =1500
			elif (self.out.z <= (-1)): self.cmd.rcThrottle =1800
			else:
				self.cmd.rcThrottle=1550
				self.cmd.rcAUX2=2000
				self.key_value=3
		self.command_pub.publish(self.cmd)
		if(self.key_value==3):
			self.calc_x(self.out.x)
			self.calc_y(self.out.y)
		self.command_pub.publish(self.cmd)
		if(self.out.z>=1 or self.out.z<=(-1)): self.key_value= 2		
		#self.stable()
		#print(self.cmd)

	def calc_x(self, x):
		if (x <= (-5)): self.cmd.rcRoll =1600
		elif (x <= (-4)): self.cmd.rcRoll =1570
		elif (x <= (-3)): self.cmd.rcRoll =1550
		elif (x <= (-1)): self.cmd.rcRoll =1530
		elif (x >= (5)): self.cmd.rcRoll =1400
		elif (x >= (4)): self.cmd.rcRoll =1430
		elif (x >= (3)): self.cmd.rcRoll =1450
		elif (x >= (1)): self.cmd.rcRoll =1470
		else: self.cmd.rcRoll =1500
		self.command_pub.publish(self.cmd)

	def calc_y(self, y):
		if (y <= (-5)): self.cmd.rcPitch =1600
		elif (y <= (-4)): self.cmd.rcPitch =1570
		elif (y <= (-3)): self.cmd.rcPitch =1550
		elif (y <= (-1)): self.cmd.rcPitch =1530
		elif (y >= (5)): self.cmd.rcPitch =1400
		elif (y >= (4)): self.cmd.rcPitch =1430
		elif (y >= (3)): self.cmd.rcPitch =1450
		elif (y >= (1)): self.cmd.rcPitch =1470
		else: self.cmd.rcPitch =1500
		self.command_pub.publish(self.cmd)

	def stable(self):
		self.cmd.rcRoll=1500
		self.cmd.rcYaw=1500
		self.cmd.rcPitch =1500
		self.command_pub.publish(self.cmd)

	def control_drone(self):
		while True:
			if self.key_value == 0:         
				self.disarm()
			if self.key_value == 1:
				self.arm()
			self.command_pub.publish(self.cmd)
			print(self.cmd.rcRoll,self.cmd.rcPitch,self.cmd.rcThrottle,self.cmd.rcAUX2)
			#rospy.sleep(.08)
			"""
################################################################################################################################################
global cmd = PlutoMsg()
		self.cmd.rcRoll =1500
		self.cmd.rcPitch =1500
		self.cmd.rcYaw =1500
		self.cmd.rcThrottle =1500
		self.cmd.rcAUX1 =1500
		self.cmd.rcAUX2 =1500
		self.cmd.rcAUX3 =1500
		self.cmd.rcAUX4 =1000
class PID:

	def __init__(self, p_gain, i_gain, d_gain, now):
		self.last_error = 0.0
		self.last_time = now
		self.p_gain = p_gain
		self.i_gain = i_gain
		self.d_gain = d_gain
		self.i_error = 0.0

	def Compute(self, input, target, now):
		dt = (now - self.last_time)
		error = target - input
		p_error = error
		self.i_error += (error + self.last_error) * dt
		i_error = self.i_error
		d_error = (error - self.last_error) / dt
		p_output = self.p_gain * p_error
		i_output = self.i_gain * i_error
		d_output = self.d_gain * d_error

		self.last_error = error
		self.last_time = now
		return p_output, i_output, d_output

class CONTROL:

	def __init__(self, direction):
		self.bcm_pin = direction
		self.min_pulse_width = 1000
		self.max_pulse_width = 2000
		pulse_width = self.min_pulse_width
		

	def update(self, temp_out):
		pulse_width = int(self.min_pulse_width + temp_out)

		if pulse_width < self.min_pulse_width:
			pulse_width = self.min_pulse_width
		if pulse_width > self.max_pulse_width:
			pulse_width = self.max_pulse_width

time_now=datetime.datetime.now().time()

roll_pid = PID(PID_TEMP_P_GAIN, PID_TEMP_I_GAIN, PID_TEMP_D_GAIN, time_now)
pitch_pid = PID(PID_TEMP_P_GAIN, PID_TEMP_I_GAIN, PID_TEMP_D_GAIN, time_now)
yaw_pid = PID(PID_TEMP_P_GAIN, PID_TEMP_I_GAIN, PID_TEMP_D_GAIN, time_now)

roll = CONTROL(rc_roll)
pitch = CONTROL(rc_pitch)
yaw = CONTROL(rc_yaw)

[p_outr, i_outr, d_outr] = roll_pid.Compute(temp_now, 0, time_now)
[p_outp, i_outp, d_outp] = pitch_pid.Compute(temp_now, 0, time_now)
[p_outy, i_outy, d_outy] = yaw_pid.Compute(temp_now, 320, time_now)

roll_out = p_outr + i_outr + d_outr
pitch_out = p_outp + i_outp + d_outp
yaw_out = p_outy + i_outy + d_outy

roll.update(roll_out)
pitch.update(pitch_out)
yaw.update(yaw_out)
"""
################################################################################################################################################
if __name__ == '__main__':
	while not rospy.is_shutdown():
		test = send_data()
		test.control_drone()
		rospy.spin()
		sys.exit(1)

